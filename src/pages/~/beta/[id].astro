---
import '../../../global.css'
import { firestore, getGame, getSession } from '../../../lib/game-saving/account'
import Editor from '../../../components/big-interactive-pages/editor'
import StandardHead from '../../../components/standard-head.astro'
import { signal } from '@preact/signals'
import { RoomState, ConnectionStatus, type PersistenceState } from '../../../lib/state'
import MobileUnsupported from '../../../components/popups-etc/mobile-unsupported'
import { mobileUserAgent } from '../../../lib/utils/mobile'

const session = await getSession(Astro.cookies)
if (!session) return Astro.redirect(`/login?to=${Astro.request.url}`, 302)

let checkRoom = false;
const game = await getGame(Astro.params.id!)
if (!game) return Astro.redirect('/404', 302)
if(game.ownerId !== session.user.id) checkRoom = true;

const fileRegexp = /^.*\/(.+)-(\d+)\.md$/

let tutorial: string[] | undefined;
let tutorialIndex: number | undefined;
if (game.tutorialName) {
	const files = await Astro.glob('/games/*.md')
		
		tutorial = files.filter(file => {
			const regexedFile = file.file.match(fileRegexp)
			return regexedFile && regexedFile[1] === game.tutorialName
		})
		?.map(md => md.compiledContent())
	tutorialIndex = game.tutorialIndex
}

let _persistenceState: PersistenceState
if(checkRoom){
	_persistenceState = {
		kind: 'COLLAB',
		game: game.id,
		password: undefined,
		session: session,
		stale: false
	}
} else {
	if (session.session.full) {
		if (game.unprotected) {
			await firestore.collection('games').doc(game.id).update({ unprotected: false })
			game.unprotected = false
		}
		if (Astro.cookies.get('sprigTempGame').value === game.id)
			Astro.cookies.delete('sprigTempGame', { path: '/' })

		_persistenceState = {
			kind: 'PERSISTED',
			session,
			cloudSaveState: 'SAVED',
			game,
			tutorial,
			tutorialIndex,
			stale: false
		}

	} else {
		if (!game.unprotected) return Astro.redirect(`/login?to=${Astro.request.url}`, 302)
		if (game.ownerId !== session.user.id) checkRoom = true

		_persistenceState = {
			kind: 'PERSISTED',
			session,
			cloudSaveState: 'SAVED',
			game,
			tutorial,
			tutorialIndex,
			stale: false
		}
	}
}
if(checkRoom){
	if(game.roomParticipants?.filter(participant => participant.userEmail === session.user.email)[0]?.isBanned) return Astro.redirect('/404', 302)
	if(game.password == undefined) return Astro.redirect('/404', 302)
}

const persistenceState = signal<PersistenceState>(_persistenceState)
let _roomState = {
	connectionStatus: ConnectionStatus.DISCONNECTED,
	roomId: game.id,
	password: "",
	participants: [],
}
const roomState = signal<RoomState>(_roomState)
const isMobile = mobileUserAgent(Astro.request.headers.get('user-agent') ?? '')
---

<script>
	import { isNewSaveStrat } from "../../../lib/state";
	isNewSaveStrat.value = true; // This code is executed on the client side and it enables the new features implemented (save-strat and collab)
</script>

<html lang='en'>
	<head>
		<StandardHead title='Editor' />
	</head>
	<body>
		<Editor
			client:load
			persistenceState={persistenceState}
			roomState={roomState}
			cookies={{
				helpAreaSize: Astro.cookies.get('helpAreaSize').number(),
				outputAreaSize: Astro.cookies.get('outputAreaSize').number(),
				hideHelp: Astro.cookies.get('hideHelp').boolean()
			}}
		/>
		{isMobile ? <MobileUnsupported /> : null}
	</body>
</html>